#include <stdio.h>
#include <stdlib.h>

#define SIZE 2  // 2x2 Hill Cipher for simplicity

// Function to calculate inverse modulo 26
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++)
        if ((a * x) % m == 1)
            return x;
    return -1;
}

// Function to find determinant of 2x2 matrix
int determinant(int matrix[SIZE][SIZE]) {
    return (matrix[0][0]*matrix[1][1] - matrix[0][1]*matrix[1][0]) % 26;
}

// Function to compute inverse of 2x2 matrix modulo 26
void inverseMatrix(int matrix[SIZE][SIZE], int inverse[SIZE][SIZE]) {
    int det = determinant(matrix);
    det = (det + 26) % 26;
    int detInv = modInverse(det, 26);

    if (detInv == -1) {
        printf("Matrix is not invertible under mod 26.\n");
        exit(1);
    }

    inverse[0][0] = matrix[1][1];
    inverse[1][1] = matrix[0][0];
    inverse[0][1] = -matrix[0][1];
    inverse[1][0] = -matrix[1][0];

    // Apply mod 26
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++) {
            inverse[i][j] = (inverse[i][j] * detInv) % 26;
            if (inverse[i][j] < 0)
                inverse[i][j] += 26;
        }
}

// Function to encrypt plaintext using Hill Cipher
void encrypt(char plaintext[], int key[SIZE][SIZE], char ciphertext[]) {
    int vector[SIZE];
    for (int i = 0; i < SIZE; i++)
        vector[i] = plaintext[i] - 'A';

    for (int i = 0; i < SIZE; i++) {
        int sum = 0;
        for (int j = 0; j < SIZE; j++)
            sum += key[i][j] * vector[j];
        ciphertext[i] = (sum % 26) + 'A';
    }
    ciphertext[SIZE] = '\0';
}

// Function to deduce key matrix given plaintext and ciphertext
void deduceKey(char plaintext[], char ciphertext[], int key[SIZE][SIZE]) {
    int P[SIZE][SIZE] = {
        {plaintext[0] - 'A', plaintext[1] - 'A'},
        {plaintext[2] - 'A', plaintext[3] - 'A'}
    };

    int C[SIZE][SIZE] = {
        {ciphertext[0] - 'A', ciphertext[1] - 'A'},
        {ciphertext[2] - 'A', ciphertext[3] - 'A'}
    };

    int P_inv[SIZE][SIZE];
    inverseMatrix(P, P_inv);

    // Key = C * P_inv mod 26
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++) {
            key[i][j] = 0;
            for (int k = 0; k < SIZE; k++)
                key[i][j] += C[i][k] * P_inv[k][j];
            key[i][j] = (key[i][j] % 26 + 26) % 26;
        }
}

int main() {
    int key[SIZE][SIZE] = {{3, 3}, {2, 5}};  // Example key
    char plaintext[] = "HELP";
    char ciphertext[5];

    printf("Original Key Matrix:\n");
    for (int i = 0; i < SIZE; i++)
        printf("%d %d\n", key[i][0], key[i][1]);

    printf("\nPlaintext: %s\n", plaintext);

    encrypt(plaintext, key, ciphertext);

    printf("Ciphertext: %s\n", ciphertext);

    // Attacker deducing key given plaintext and ciphertext
    int deducedKey[SIZE][SIZE];
    deduceKey(plaintext, ciphertext, deducedKey);

    printf("\nDeduced Key Matrix:\n");
    for (int i = 0; i < SIZE; i++)
        printf("%d %d\n", deducedKey[i][0], deducedKey[i][1]);

    return 0;
}
