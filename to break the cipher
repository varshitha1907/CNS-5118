#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Compute GCD
int gcd(int a, int b) {
    while (b != 0) {
        int t = a % b;
        a = b;
        b = t;
    }
    return a;
}

// Compute modular inverse of a under mod 26
int modInverse(int a) {
    a = a % 26;
    for (int x = 1; x < 26; x++) {
        if ((a * x) % 26 == 1)
            return x;
    }
    return -1;
}

// Decryption function
void decrypt(char *cipher, int a, int b, char *plain) {
    int a_inv = modInverse(a);
    if (a_inv == -1) {
        printf("Modular inverse does not exist for a = %d\n", a);
        return;
    }

    for (int i = 0; cipher[i] != '\0'; i++) {
        if (isalpha(cipher[i])) {
            int c = toupper(cipher[i]) - 'A';
            int p = (a_inv * (c - b + 26)) % 26;
            plain[i] = p + 'A';
        } else {
            plain[i] = cipher[i];
        }
    }
    plain[strlen(cipher)] = '\0';
}

// Try to solve two equations mod 26 to find a and b
int solveAffineKey(int c1, int c2, int p1, int p2, int *a, int *b) {
    int delta_c = (c1 - c2 + 26) % 26;
    int delta_p = (p1 - p2 + 26) % 26;

    int inv = modInverse(delta_p);
    if (inv == -1) return 0;

    *a = (delta_c * inv) % 26;
    *b = (c1 - (*a * p1) + 26 * 26) % 26;  // prevent negative
    return 1;
}

int main() {
    char ciphertext[100], plaintext[100];
    int a, b;

    printf("Enter the ciphertext (UPPERCASE only): ");
    scanf("%s", ciphertext);

    // Given info:
    // Most frequent letters in ciphertext: B (1), U (20)
    // Assume corresponding plaintext: E (4), T (19)

    int c1 = 'B' - 'A'; // 1
    int c2 = 'U' - 'A'; // 20
    int p1 = 'E' - 'A'; // 4
    int p2 = 'T' - 'A'; // 19

    if (solveAffineKey(c1, c2, p1, p2, &a, &b)) {
        printf("Recovered key: a = %d, b = %d\n", a, b);
        decrypt(ciphertext, a, b, plaintext);
        printf("Decrypted text: %s\n", plaintext);
    } else {
        printf("Failed to find valid key (a, b).\n");
    }

    return 0;
}
